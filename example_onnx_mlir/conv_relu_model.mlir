[1/6] Wed Jul 30 13:39:43 2025 (0s) Importing ONNX Model to MLIR Module from "conv_relu_model.onnx"
[2/6] Wed Jul 30 13:39:43 2025 (0s) Compiling and Optimizing MLIR Module
#map = affine_map<(d0) -> (d0)>
#map1 = affine_map<(d0, d1) -> (d0 * 16 + d1)>
#map2 = affine_map<(d0) -> (-d0 + 1, 0)>
#map3 = affine_map<(d0) -> (-d0 + 33, 3)>
#map4 = affine_map<(d0, d1) -> (-d1 + 1, 0)>
#map5 = affine_map<(d0, d1) -> (-d1 + 33, 3)>
#map6 = affine_map<(d0, d1) -> (d0 + d1 * 3)>
#map7 = affine_map<(d0, d1) -> (d0 + d1 - 1)>
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "onnx-mlir.symbol-postfix" = "conv_relu_model"} {
  func.func @main_graph(%arg0: memref<?x3x32x32xf32> {onnx.dim_params = "0:batch_size", onnx.name = "input"}) -> (memref<?x16x32x32xf32> {onnx.dim_params = "0:batch_size", onnx.name = "output"}) attributes {llvm.emit_c_interface} {
    %cst = arith.constant 0.000000e+00 : f32
    %c0 = arith.constant 0 : index
    %0 = "krnl.global"() {name = "constant_0", shape = [16, 3, 3, 3], value = dense<"0xtensor<16x3x3x3xf32>} : () -> memref<16x3x3x3xf32>
    %1 = "krnl.global"() {name = "constant_1", shape = [16], value = dense<[-0.175327718, -0.0397716053, 0.0562665127, -0.1554472, -0.0248158649, -0.131880745, -0.0366099887, 0.135638461, -0.0312190931, 0.0738084167, -0.125014156, -0.028255742, 0.0804295912, 0.0538352951, 0.159300625, -0.0682038366]> : tensor<16xf32>} : () -> memref<16xf32>
    %dim = memref.dim %arg0, %c0 : memref<?x3x32x32xf32>
    %alloc = memref.alloc(%dim) {alignment = 16 : i64} : memref<?x16x32x32xf32>
    affine.for %arg1 = 0 to #map(%dim) {
      affine.for %arg2 = 0 to 1 {
        affine.for %arg3 = 0 to 16 {
          %2 = affine.apply #map1(%arg2, %arg3)
          affine.for %arg4 = 0 to 32 {
            affine.for %arg5 = 0 to 32 {
              %3 = affine.for %arg6 = 0 to 3 iter_args(%arg7 = %cst) -> (f32) {
                %6 = affine.for %arg8 = max #map2(%arg4) to min #map3(%arg4) iter_args(%arg9 = %arg7) -> (f32) {
                  %7 = affine.for %arg10 = max #map4(%arg4, %arg5) to min #map5(%arg4, %arg5) iter_args(%arg11 = %arg9) -> (f32) {
                    %8 = affine.apply #map6(%arg6, %arg2)
                    %9 = affine.apply #map7(%arg8, %arg4)
                    %10 = affine.apply #map7(%arg10, %arg5)
                    %11 = affine.load %arg0[%arg1, %8, %9, %10] : memref<?x3x32x32xf32>
                    %12 = affine.load %0[%2, %arg6, %arg8, %arg10] : memref<16x3x3x3xf32>
                    %13 = arith.mulf %11, %12 : f32
                    %14 = arith.addf %arg11, %13 : f32
                    affine.yield %14 : f32
                  }
                  affine.yield %7 : f32
                }
                affine.yield %6 : f32
              }
              %4 = affine.load %1[%2] : memref<16xf32>
              %5 = arith.addf %3, %4 : f32
              affine.store %5, %alloc[%arg1, %2, %arg4, %arg5] : memref<?x16x32x32xf32>
            }
          }
        }
      }
    }
    %alloc_0 = memref.alloc(%dim) {alignment = 16 : i64} : memref<?x16x32x32xf32>
    affine.for %arg1 = 0 to #map(%dim) {
      affine.for %arg2 = 0 to 16 {
        affine.for %arg3 = 0 to 32 {
          affine.for %arg4 = 0 to 32 {
            %2 = affine.load %alloc[%arg1, %arg2, %arg3, %arg4] : memref<?x16x32x32xf32>
            %3 = arith.maxnumf %2, %cst : f32
            affine.store %3, %alloc_0[%arg1, %arg2, %arg3, %arg4] : memref<?x16x32x32xf32>
          }
        }
      }
    }
    return %alloc_0 : memref<?x16x32x32xf32>
  }
  "krnl.entry_point"() {func = @main_graph, numInputs = 1 : i32, numOutputs = 1 : i32, signature = "[    { \22type\22 : \22f32\22 , \22dims\22 : [-1 , 3 , 32 , 32] , \22name\22 : \22input\22 }\0A\0A]\00@[   { \22type\22 : \22f32\22 , \22dims\22 : [-1 , 16 , 32 , 32] , \22name\22 : \22output\22 }\0A\0A]\00"} : () -> ()
}
